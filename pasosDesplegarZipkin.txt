--Para ejecutar zipkin por defecto usar el comando
java -jar zipkin-server-2.23.4-exec.jar

java -jar zipkin-server-2.23.4-exec.jar --server.port=7000

-- Para acceder UI de zipkin
http://127.0.0.1:9411/

--Integrar mysql con zipkin
-Crear bd en mysql
nombre bd zipkin
-Crear usuario de BD en mysql
usuario:zipkin
clave:zipkin
permisos :
          select
		  insert
		  update
          delete
          show view
          execute

CREATE TABLE IF NOT EXISTS zipkin_spans (
  trace_id_high BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
  trace_id BIGINT NOT NULL,
  id BIGINT NOT NULL,
  name VARCHAR(255) NOT NULL,
  remote_service_name VARCHAR(255),
  parent_id BIGINT,
  debug BIT(1),
  start_ts BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
  duration BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',
  PRIMARY KEY (trace_id_high, trace_id, id)
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;

ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';
ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';
ALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';
ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';

CREATE TABLE IF NOT EXISTS zipkin_annotations (
  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',
  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',
  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;

ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';
ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces and autocomplete values';
ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces and autocomplete values';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';

CREATE TABLE IF NOT EXISTS zipkin_dependencies (
  `day` DATE NOT NULL,
  `parent` VARCHAR(255) NOT NULL,
  `child` VARCHAR(255) NOT NULL,
  `call_count` BIGINT,
  `error_count` BIGINT,
  PRIMARY KEY (`day`, `parent`, `child`)
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;




docker run -d -p 3306:3306 --name mysql8_0 -e MYSQL_ROOT_PASSWORD=1234 mysql:8.0
docker exec -it mysql80_1 mysql -uroot -p

docker run -d -p 3306:3306 --name mysql5_7 -e MYSQL_ROOT_PASSWORD=1234 mysql:5.7
docker exec -it mysql5_7 mysql -uroot -p
CREATE USER 'zipkin'@'172.17.0.1' IDENTIFIED BY 'zipkin';
GRANT ALL PRIVILEGES ON *.* TO 'zipkin'@'172.17.0.1' WITH GRANT OPTION;
flush privileges; 


docker run --restart always 
--name mysql8.0 
--net dev-network 
-v /Users/[your_username]/Develop/mysql_data/8.0:/var/lib/mysql 
-v /Users/[your_username]/Develop/docker_configs/mysql:/etc/mysql/conf.d 
-p 3306:3306 
-d 
-e MYSQL_ROOT_PASSWORD=your_password 
mysql:8.0

/home/pob/develop/docker_configs/mysql/8.0/config/my.cnf

/home/pob/develop/docker_configs/mysql/8.0/data




docker run -d  -p 5432:5432 --name some-postgres -e POSTGRES_PASSWORD=1234 postgres:9.5-alpine


docker pull rabbitmq:3.8.27-management-alpine
docker run -d -p 15672:15672 -p 5672:5672 --name rabbitmq_1 rabbitmq:3.8.27-management-alpine
http://localhost:15672/#/
usuario:guest
pwd:guest
Puerto de rabbitmq 5672

--Comando para compilar aplicaciones spring-boot
.\mvnw clean package -DskipTests

--Para generar imagen docker
docker build -t <<nombre_imagen:version>> .
docker build -t config-server:1.0.0 .
docker build -t eureka-server:1.0.0 .
docker build -t servicio-productos:1.0.0 .
docker build -t servicio-zuul-server:1.0.0 .

--Crear red en docker para prueba
docker network create springcloud_red

--Crear contenedor docker apartir de imagen docker creado
docker run -p 8888:8888 --name config-server --network springcloud_red config-server:1.0.0
docker run -p 8761:8761 --name eureka-server --network springcloud_red eureka-server:1.0.0
docker run -d -p 3306:3306 --name mysql5_7_springcloud    --network springcloud_red -e MYSQL_DATABASE=db_springboot_cloud -e MYSQL_ROOT_PASSWORD=1234 mysql:5.7
docker run -d -p 5432:5432 --name postgres9_5_springcloud --network springcloud_red -e POSTGRES_DB=db_springboot_cloud    -e POSTGRES_PASSWORD=1234   postgres:9.5-alpine
--PARA ESTE CASO A NO TENER IP FIJA SOLO SE USA -P
docker run -P --name servicio-productos --network springcloud_red servicio-productos:1.0.0
docker run -p 8090:8090 --name servicio-zuul-server --network springcloud_red servicio-zuul-server:1.0.0

--Ver log en docker
docker logs -f <<image_id>>
docker logs -f <<container_name>>

1.-config-server
2.-eureka-server
3.-servicio-usuarios
4.-servicio-oauth2
5.-servicio-productos
6.-servicio-items
7.-servicio-zuul-server
